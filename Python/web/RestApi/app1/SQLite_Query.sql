-- ЗАПРОСЫ К БД ===============================================================

-- Получить все данные из таблицы
-- SELECT * FROM anime_titles;

-- Получить только уникальные данные из таблицы
-- SELECT DISTINCT id, name FROM anime_titles;

-- Получить все данные соответствующие условию
-- SELECT * FROM anime_titles WHERE id=2;

-- ДОБОВЛЕНИЕ ЗАПИСЕЙ В БД ====================================================

-- INSERT INTO anime_titles (name, genre, raiting)
-- VALUES ('Маг цилитель', 'Hentai', '18+');

-- ОБНОВЛЕНИЕ ДАННЫХ В БД =====================================================

-- Обновить данные по id. Если не указать условиe на конкретную запись, то
-- обновятся все записи в колонке
-- UPDATE anime_titles SET raiting = '18+' WHERE id=2;

-- УДАЛЕНИЕ ЗАПИСЕЙ В БД ======================================================

-- Удалить запись по id. Если не указать условие на конеретную запись, то
-- удаляться все записи из таблицы
-- DELETE FROM anime_titles WHERE id=3;

-- Условия WHERE с ветвлением AND, OR, NOT, IN ================================

-- Получить данные по нескольким условиям
-- SELECT id, name FROM anime_titles WHERE raiting='18+' OR raiting='16+';
-- SELECT id, name, raiting FROM anime_titles WHERE raiting IN ('18+', '16+');

-- Более сложное условие со скобками
-- SELECT * FROM anime_titles WHERE (id >= 2 OR id < 5)
-- AND raiting IN ('18+', '16+');

-- ОПЕРАТОРЫ ДЛЯ СОСТАВЛЕНИЯ ЗАПРОСОВ =========================================

-- = это оператор сравнения, а не присваивания.

-- <> не равноо (в некоторых бд !=)

-- BETWEEN — «между», для проверки значения в диапазоне
-- Например: birth_year BETWEEN 1850 AND 1900

-- LIKE, ILIKE — поиск строки по шаблону и поиск строки по шаблону без учёта
-- регистра.
-- Пример: city LIKE 'Днепр%', символ % заменяет любой набор символов: такой
-- маске будут соответствовать значения поля ДнепроГЭС, Днепр или Днепровский

-- IN — вхождение в список. Пример использования city IN ('Москва', 'Днепр')

-- Агрегирующие функции. Функция COUNT, MIN, MAX===============================

-- Посчитать количество записей в таблице
-- SELECT COUNT(*) AS cnt FROM persons;

-- Найти самый новый и самый старый аниме тайтел
-- SELECT MAX(id) AS new_row, name FROM persons;
-- SELECT MIN(id) AS old_row, name FROM persons;

-- Разные агрегирующие функции ================================================

-- AVG (column) возвращает среднее значение по столбцу column
-- SUM(column) возвращает сумму по столбцу column